---
description: Responsive design patterns, mobile-first approach, and breakpoint conventions
---

# Responsive Design Patterns

## Mobile-First Philosophy

Always design for mobile first, then enhance for larger screens:
- Start with mobile layout (default styles)
- Add breakpoint modifiers for larger screens (sm:, md:, lg:)
- Test on mobile devices regularly

## Breakpoints

### Tailwind Default Breakpoints
```css
sm:  640px  /* Small tablets and large phones */
md:  768px  /* Tablets */
lg:  1024px /* Laptops */
xl:  1280px /* Desktops */
2xl: 1536px /* Large desktops */
```

### Common Usage Patterns
```tsx
// Show/hide based on screen size
<div className="hidden md:flex">Desktop only</div>
<div className="flex md:hidden">Mobile only</div>

// Responsive sizing
<div className="w-full md:w-1/2 lg:w-1/3">

// Responsive grid
<div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3">
```

## Layout Responsive Patterns

### Stacking to Row
```tsx
// Stack on mobile, row on desktop
<div className="flex flex-col gap-2 sm:flex-row">
  <div>Item 1</div>
  <div>Item 2</div>
</div>

// More control over breakpoints
<div className="flex flex-col md:flex-row lg:flex-col xl:flex-row">
```

### Responsive Spacing
```tsx
// Smaller gaps on mobile, larger on desktop
<div className="gap-2 md:gap-4 lg:gap-6">

// Responsive padding
<div className="p-2 md:p-4 lg:p-6">

// Responsive margin
<div className="m-2 md:m-4 lg:m-6">
```

### Responsive Width
```tsx
// Full width mobile, constrained desktop
<div className="w-full md:w-2/3 lg:w-1/2">

// Responsive max-width
<div className="w-full max-w-full md:max-w-2xl lg:max-w-4xl">

// Sheet width pattern
<SheetContent className="w-[90%] !max-w-lg">
```

## Grid Responsive Patterns

### Image/Card Grids
```tsx
// 2 columns mobile, 3 desktop
<div className="grid grid-cols-2 gap-4 md:grid-cols-3">
  {items.map(item => <Card key={item.id} />)}
</div>

// 2 columns mobile, 5 desktop (for assets)
<div className="grid grid-cols-2 gap-4 md:grid-cols-5">
  {assets.map(asset => <AssetCard key={asset.id} />)}
</div>

// Single column mobile, 2 columns desktop
<div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
  {items.map(item => <Item key={item.id} />)}
</div>
```

### Auto-fit Grids
```tsx
// Grid that automatically fits columns
<div className="grid grid-cols-[repeat(auto-fit,minmax(200px,1fr))] gap-4">
  {items.map(item => <Card key={item.id} />)}
</div>
```

## Typography Responsive Patterns

### Responsive Text Sizes
```tsx
// Smaller on mobile, larger on desktop
<h1 className="text-2xl md:text-4xl lg:text-6xl">

// Body text scaling
<p className="text-sm md:text-base lg:text-lg">

// Responsive line height
<p className="text-base leading-tight md:leading-normal lg:leading-relaxed">
```

### Conditional Text Display
```tsx
// Full text on desktop, truncated on mobile
<span className="line-clamp-1 md:line-clamp-none">Long text here</span>

// Hide text on mobile, show icon only
<Button>
  <Icon />
  <span className="hidden md:inline">Button Text</span>
</Button>
```

## Navigation Responsive Patterns

### Mobile Menu Pattern
```tsx
<div className="flex items-center gap-2">
  {/* Mobile menu button */}
  <Button className="md:hidden" onClick={toggleMenu}>
    <MenuIcon />
  </Button>

  {/* Desktop navigation */}
  <nav className="hidden md:flex gap-4">
    <NavLink href="/page1">Page 1</NavLink>
    <NavLink href="/page2">Page 2</NavLink>
  </nav>
</div>
```

### Responsive Header
```tsx
<header className="flex h-12 items-center justify-between border-b px-2 md:px-4">
  <div className="flex items-center gap-2">
    {/* Logo always visible */}
    <Logo />

    {/* Title hidden on mobile */}
    <span className="hidden md:inline text-sm font-medium">
      Dashboard
    </span>
  </div>

  <div className="flex items-center gap-2">
    {/* Actions adapt to screen size */}
    <Button className="hidden sm:flex">
      <Icon />
      <span>Action</span>
    </Button>
    <Button className="sm:hidden" size="icon">
      <Icon />
    </Button>
  </div>
</header>
```

## Panel/Split View Responsive Patterns

### Responsive Panel Display
```tsx
// Hide right panel on mobile when in "both" mode
<ResizablePanel
  className={cn(
    activeTab === "both" ? "hidden md:flex" : "flex"
  )}
  collapsible={true}
  defaultSize={50}
  ref={rightPanelRef}
>
  {/* Right panel content */}
</ResizablePanel>
```

### Mobile-First Panel Logic
```tsx
useEffect(() => {
  // Force single panel view on mobile
  if (isMobile && activeTab === "both") {
    setActiveTab("form");
    return;
  }
}, [isMobile, activeTab]);
```

### Tab Switcher for Panels
```tsx
// Allow switching between panels on mobile
<Select value={activeTab} onValueChange={setActiveTab}>
  <SelectItem value="form">Form</SelectItem>
  <SelectItem value="preview">Preview</SelectItem>
  {/* "Both" option hidden on mobile */}
  <SelectItem className="hidden md:flex" value="both">
    Both
  </SelectItem>
</Select>
```

## Form Responsive Patterns

### Responsive Form Layout
```tsx
// Stack form sections on mobile
<AccordionContent
  ref={resizeRef}
  className={cn(
    container.width > 1200 ? "flex-row gap-4" : "flex-col"
  )}
>
  {/* Form fields adapt based on container width */}
</AccordionContent>
```

### Responsive Form Rows
```tsx
// FormRow component stacks on mobile, side-by-side on desktop
<FormRow>
  <FormInput name="field1" label="Field 1" reactform={form} />
  <FormInput name="field2" label="Field 2" reactform={form} />
</FormRow>

// Manual responsive form row
<div className="flex flex-col gap-2 sm:flex-row">
  <FormInput name="field1" label="Field 1" reactform={form} />
  <FormInput name="field2" label="Field 2" reactform={form} />
</div>
```

### Complex Responsive Form Fields
```tsx
<div className="flex flex-col items-center gap-2 sm:flex-row">
  <div className="flex w-full flex-row gap-2 sm:w-2/3">
    <FormInput name="label" reactform={form} />
    <FormSelect name="type" reactform={form}>
      <SelectItem value="option">Option</SelectItem>
    </FormSelect>
  </div>
  <div className="flex w-full flex-row items-end gap-2 sm:w-1/3">
    <FormInput name="value" reactform={form} />
    <Button variant="destructive" size="icon">
      <TrashIcon />
    </Button>
  </div>
</div>
```

## Dialog/Modal Responsive Patterns

### Responsive Dialog Width
```tsx
// Full width on mobile, constrained on desktop
<DialogContent className="w-full md:w-[600px] lg:w-[800px]">

// Max width responsive
<DialogContent className="max-w-full md:max-w-2xl">
```

### Sheet Responsive Width
```tsx
// 90% width on mobile, max 512px on desktop
<SheetContent className="w-[90%] !max-w-lg">
```

## Button Responsive Patterns

### Icon Only on Mobile
```tsx
<Button variant="default">
  <Icon />
  <span className="hidden md:flex">Button Text</span>
</Button>
```

### Full Width on Mobile
```tsx
<Button className="w-full sm:w-auto">
  Submit
</Button>
```

### Responsive Button Groups
```tsx
<div className="flex flex-col gap-2 sm:flex-row">
  <Button>Action 1</Button>
  <Button>Action 2</Button>
  <Button>Action 3</Button>
</div>
```

## Height Responsive Patterns

### Viewport Height
```tsx
// Use dvh for better mobile support
className="h-screen" // Becomes h-[100dvh] in CSS

// Responsive height
<div className="h-screen md:h-[80vh]">
```

### Content Height Calculations
```tsx
// Different header heights on mobile vs desktop
className="dash-layout-page-content-height"
// h-[calc(100svh-50px)] md:h-[calc(100svh-48px-18px)]
```

## Container Responsive Patterns

### Responsive Padding
```tsx
// Less padding on mobile, more on desktop
<div className="p-2 md:p-4 lg:p-6">
<div className="px-2 md:px-4 lg:px-6">
<div className="py-2 md:py-4 lg:py-6">
```

### Responsive Margins
```tsx
// Responsive horizontal margins
<div className="mx-2 md:mx-4 lg:mx-auto">
```

### Adaptive Container Width
```tsx
// Adaptive based on resize observer
const [resizeRef, container] = useResizeObserver();

<div ref={resizeRef} className={cn(
  container.width > 1200 ? "w-fit" : "w-full [&>*]:w-full"
)}>
```

## Image Responsive Patterns

### Responsive Image Display
```tsx
<Image
  src={imageUrl}
  alt={alt}
  width={200}
  height={200}
  className="w-full md:w-1/2 lg:w-1/3 aspect-square object-cover rounded-md"
  unoptimized
/>
```

### Responsive Image Grid
```tsx
<div className="grid grid-cols-2 gap-4 md:grid-cols-3 lg:grid-cols-5">
  {images.map(img => (
    <Image
      key={img.id}
      src={img.url}
      className="aspect-square w-full object-cover rounded-md"
    />
  ))}
</div>
```

## Table Responsive Patterns

### Horizontal Scroll on Mobile
```tsx
<div className="overflow-x-auto">
  <table className="min-w-full">
    {/* Table content */}
  </table>
</div>
```

### Adaptive Table Display
```tsx
// Show as cards on mobile, table on desktop
<div className="md:hidden">
  {/* Card layout for mobile */}
  {data.map(item => <Card key={item.id} {...item} />)}
</div>
<div className="hidden md:block">
  <DataTable data={data} columns={columns} />
</div>
```

## Custom Hook for Responsive

### useIsMobile Hook
```tsx
import { useIsMobile } from "@/hooks/use-mobile";

const Component = () => {
  const isMobile = useIsMobile();

  return (
    <div>
      {isMobile ? <MobileView /> : <DesktopView />}
    </div>
  );
};
```

### useResizeObserver Hook
```tsx
import { useResizeObserver } from "@mantine/hooks";

const Component = () => {
  const [resizeRef, container] = useResizeObserver();

  return (
    <div ref={resizeRef}>
      {container.width > 768 ? <DesktopLayout /> : <MobileLayout />}
    </div>
  );
};
```

## Testing Responsive Designs

### Breakpoint Testing Checklist
- [ ] Test at 375px (iPhone SE)
- [ ] Test at 390px (iPhone 12/13/14)
- [ ] Test at 768px (iPad portrait)
- [ ] Test at 1024px (iPad landscape)
- [ ] Test at 1920px (Desktop)

### Common Issues to Check
- Text truncation and overflow
- Button and icon sizing
- Navigation accessibility
- Form field layouts
- Image scaling
- Scrolling behavior
- Touch target sizes (minimum 44x44px)

## Best Practices

1. **Design mobile-first**: Start with mobile, enhance for desktop
2. **Use consistent breakpoints**: Stick to Tailwind's standard breakpoints
3. **Test on real devices**: Emulators are good, but test on actual devices
4. **Maintain touch targets**: Minimum 44x44px for interactive elements
5. **Use responsive typography**: Scale text appropriately for screen size
6. **Hide/show strategically**: Use `hidden` and `flex`/`block` modifiers
7. **Stack on mobile**: Convert rows to columns on small screens
8. **Use relative units**: Prefer rem/em over px for better scaling
9. **Test landscape orientation**: Don't forget mobile landscape mode
10. **Consider hover states**: Touch devices don't have hover
11. **Use dvh for heights**: Better than vh on mobile browsers
12. **Implement resize observers**: For truly adaptive layouts
13. **Optimize images**: Use responsive images with srcset/sizes
14. **Test with accessibility tools**: Screen readers, keyboard navigation
15. **Performance matters more on mobile**: Optimize bundle size and loading
