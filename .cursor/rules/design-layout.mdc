---
description: Layout patterns, structure conventions, and responsive design for dashboard pages
---

# Layout Design Patterns

## Dashboard Layout Structure

### Root Dashboard Layout
```tsx
// app/(dashboard)/layout.tsx
<SidebarProvider>
  <DashboardSidebar />
  <SidebarInset>
    <div className="dash-page h-full overflow-hidden">
      <DashboardSidebarHeader />
      <main className="dash-layout-page-content-height scroll-bar-hidden overflow-y-scroll">
        {children}
      </main>
    </div>
  </SidebarInset>
</SidebarProvider>
```

### Key Layout Classes
```css
/* Page container */
.dash-page: flex w-full flex-col

/* Content height with header offset */
.dash-layout-page-content-height: h-[calc(100svh-50px)] md:h-[calc(100svh-48px-18px)]

/* Hide scrollbar but maintain scroll */
.scroll-bar-hidden: scrollbar-width: none (+ webkit)
```

## Page Layout Patterns

### Simple Page Layout
```tsx
const Page = () => {
  return (
    <div className="dash-page gap-4 p-4">
      {/* Alert/notification area */}
      <Alert>...</Alert>

      {/* Main content */}
      <DataTable />
    </div>
  );
};
```

### Split View Layout (Form + Preview)
```tsx
<div className="flex h-full flex-col">
  {/* Top toolbar */}
  <div className="flex h-12 shrink-0 flex-row items-center justify-between gap-2 border-b px-2">
    {/* Toolbar content */}
  </div>

  {/* Resizable panels */}
  <ResizablePanelGroup direction="horizontal" className="divide-x">
    <ResizablePanel collapsible defaultSize={50} ref={formPanelRef}>
      {/* Form content */}
    </ResizablePanel>
    <ResizablePanel collapsible defaultSize={50} ref={previewPanelRef}>
      {/* Preview content */}
    </ResizablePanel>
  </ResizablePanelGroup>
</div>
```

### Scrollable Content Layout
```tsx
<div className="scroll-bar-hidden flex h-full flex-col overflow-y-scroll">
  {/* Fixed header section */}
  <div className="flex h-14 flex-row items-center justify-between border-b px-4">
    <span className="text-sm font-medium">Section Title</span>
  </div>

  {/* Scrollable content */}
  <Accordion className="w-full divide-y border-b">
    {/* Content sections */}
  </Accordion>
</div>
```

## Header Patterns

### Page Header with Actions
```tsx
<div className="flex h-12 shrink-0 flex-row items-center justify-between gap-2 border-b px-2">
  <div className="flex flex-row items-center gap-2">
    {/* Left side actions */}
    <Button variant="outline">Action 1</Button>
    <Button variant="outline">Action 2</Button>
  </div>

  <div className="flex flex-row items-center gap-2">
    {/* Right side actions */}
    <Select>...</Select>
    <Button variant="default">Primary Action</Button>
  </div>
</div>
```

### Simple Header
```tsx
<div className="flex h-14 flex-row items-center justify-between border-b px-4">
  <span className="text-sm font-medium">Title</span>
  <div className="">
    {/* Header actions */}
  </div>
</div>
```

## Content Section Patterns

### Section with Title and Description
```tsx
<div>
  <div className="instrument-serif text-xl font-bold">Section Title</div>
  <p className="text-muted-foreground text-xs">
    Section description text
  </p>
</div>
```

### Section with Content Grid
```tsx
<>
  <div>
    <div className="instrument-serif text-xl font-bold">Section Title</div>
    <p className="text-muted-foreground text-xs">Description</p>
  </div>

  <div className="mt-2 grid grid-cols-2 gap-4 md:grid-cols-5">
    {/* Grid items */}
  </div>
</>
```

## Responsive Container Patterns

### Adaptive Form Container
```tsx
// Use resize observer for adaptive layouts
const [resizeRef, container] = useResizeObserver();

<AccordionContent
  ref={resizeRef}
  className={cn(
    container.width > 1200 ? "flex-row gap-4" : "flex-col"
  )}
>
  {/* Adaptive content */}
</AccordionContent>
```

### Conditional Column Layout
```tsx
<div className={cn(
  container.width > 1200 ? "w-fit" : "w-full [&>*]:w-full",
  "flex flex-row gap-4"
)}>
  {/* Content adapts based on container width */}
</div>
```

### Standard Responsive Grid
```tsx
// 2 columns mobile, 3 columns desktop
<div className="grid grid-cols-2 gap-4 md:grid-cols-3">

// 2 columns mobile, 5 columns desktop
<div className="grid grid-cols-2 gap-4 md:grid-cols-5">

// 1 column mobile, 2 columns desktop
<div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
```

## Split Panel Patterns

### Horizontal Split with Collapse
```tsx
<ResizablePanelGroup direction="horizontal" className="divide-x">
  <ResizablePanel
    collapsible={true}
    defaultSize={50}
    ref={leftPanelRef}
  >
    {/* Left content */}
  </ResizablePanel>

  <ResizablePanel
    className={cn(activeTab === "both" ? "hidden md:flex" : "flex")}
    collapsible={true}
    defaultSize={50}
    ref={rightPanelRef}
  >
    {/* Right content */}
  </ResizablePanel>
</ResizablePanelGroup>
```

### Panel Control Logic
```tsx
useEffect(() => {
  const leftPanel = leftPanelRef.current;
  const rightPanel = rightPanelRef.current;

  if (!leftPanel || !rightPanel) return;

  switch (activeTab) {
    case "left":
      if (leftPanel.isCollapsed()) leftPanel.expand();
      rightPanel.collapse();
      leftPanel.resize(100);
      break;
    case "right":
      if (rightPanel.isCollapsed()) rightPanel.expand();
      leftPanel.collapse();
      rightPanel.resize(100);
      break;
    case "both":
      if (leftPanel.isCollapsed()) leftPanel.expand();
      if (rightPanel.isCollapsed()) rightPanel.expand();
      leftPanel.resize(50);
      rightPanel.resize(50);
      break;
  }
}, [activeTab]);
```

## Overflow and Scrolling

### Full Height Scrollable
```tsx
<div className="scroll-bar-hidden bg-sidebar h-full w-full overflow-y-auto">
  {/* Content */}
</div>
```

### Constrained Height Scrollable
```tsx
<DialogContentContainer className="scroll-bar-hidden max-h-80 divide-y overflow-y-scroll p-0">
  {/* Content */}
</DialogContentContainer>
```

### Main Content Area
```tsx
<main className="dash-layout-page-content-height scroll-bar-hidden overflow-y-scroll">
  {children}
</main>
```

## Flex Patterns

### Space Between Layout
```tsx
<div className="flex w-full flex-row justify-between gap-2">
  <div className="flex w-full flex-row gap-2">
    {/* Left content */}
  </div>
  <div className="flex flex-row gap-2">
    {/* Right content */}
  </div>
</div>
```

### Centered Content
```tsx
<div className="flex h-full items-center justify-center">
  {/* Centered content */}
</div>

<div className="flex h-full w-full items-center justify-center">
  {/* Fully centered content */}
</div>
```

### Column Layout with Gap
```tsx
<div className="flex flex-col gap-2">
  {/* Vertically stacked items */}
</div>

<div className="flex flex-col gap-4">
  {/* Vertically stacked sections */}
</div>
```

### Row Layout with Responsive Wrap
```tsx
<div className="flex flex-col items-center gap-2 sm:flex-row">
  {/* Stacks on mobile, row on desktop */}
</div>
```

## Width Constraints

### Standard Container
```tsx
<div className="new-container relative !border-none sm:!border-dashed">
  {/* max-w-[1000px] centered container with dashed borders */}
</div>
```

### Full Width
```tsx
<div className="w-full">
  {/* Full width content */}
</div>
```

### Responsive Width
```tsx
// Full on mobile, constrained on desktop
<div className="w-[90%] !max-w-lg">

// Adaptive based on content
<div className={cn(
  container.width > 1200 ? "w-fit" : "w-full"
)}>
```

## Height Patterns

### Full Viewport Height
```tsx
// Use dvh for mobile support
<div className="h-screen"> // actually renders as h-[100dvh]
<div className="h-full">
```

### Fixed Heights
```tsx
<div className="h-12">  // Toolbar height
<div className="h-14">  // Header height
<div className="h-5.5"> // Small button height
```

### Calculated Heights
```tsx
// Content area minus header
className="dash-layout-page-content-height" // h-[calc(100svh-50px)] md:h-[calc(100svh-48px-18px)]
```

## Dividers and Separators

### Accordion/List Dividers
```tsx
<Accordion className="w-full divide-y border-b">
  {/* Items separated by borders */}
</Accordion>
```

### Panel Dividers
```tsx
<ResizablePanelGroup className="divide-x">
  {/* Vertical divider between panels */}
</ResizablePanelGroup>
```

### Content Sections
```tsx
<div className="scroll-bar-hidden max-h-80 divide-y overflow-y-scroll">
  {items.map(item => (
    <div key={item.id} className="p-2">
      {/* Divided items */}
    </div>
  ))}
</div>
```

## Marketing Layout (for reference)

### Contained Marketing Layout
```tsx
<div className="new-container relative !border-none sm:!border-dashed">
  <Header />
  <Hero />
  <Features />
  <Footer />
</div>
```

## Best Practices

1. **Use semantic layout classes**: `dash-page`, `dash-layout-page-content-height`
2. **Hide scrollbars consistently**: Use `scroll-bar-hidden` class
3. **Consider mobile first**: Stack on mobile, row on desktop
4. **Use proper height calculations**: Account for headers with calc()
5. **Leverage flex patterns**: Consistent gap values (gap-2, gap-4)
6. **Implement resize observers**: For truly responsive layouts
7. **Use ResizablePanel**: For split views with user control
8. **Test overflow behavior**: Ensure scrolling works on all viewports
9. **Use dvh for mobile**: Better viewport height on mobile browsers
10. **Maintain consistent spacing**: p-4 for page content, px-2/px-4 for headers
