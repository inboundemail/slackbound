---
description: Development workflow and commands
---

# Development Workflow

## Package Manager

This project uses **pnpm** (version 10.14.0+) as specified in [package.json](mdc:package.json).

Always use `pnpm` instead of npm or yarn:

```bash
pnpm install          # Install dependencies
pnpm dev              # Start development server
pnpm dev:tunnel       # Start with ngrok tunnel for Slack
pnpm build            # Build for production
pnpm lint             # Run Biome linter
pnpm format           # Auto-fix formatting issues
```

## Development Server

### Local Development
```bash
pnpm dev
```

Starts Nitro dev server with hot reloading.

### Tunnel for Slack Testing
```bash
pnpm dev:tunnel
```

Uses ngrok to create a public URL for testing Slack events. Update your Slack app's Request URL with the tunnel URL.

## Slack App Setup

1. Create a Slack app at api.slack.com/apps
2. Set environment variables:
   - `SLACK_BOT_TOKEN` - From OAuth & Permissions
   - `SLACK_SIGNING_SECRET` - From Basic Information
3. Configure Request URL: `https://your-url/api/slack/events`
4. Subscribe to bot events as needed
5. Install app to workspace

## File Structure Guidelines

- **Bolt listeners** → `src/bolt/listeners/{category}/`
- **API routes** → `src/server/api/`
- **Utilities** → Create `src/bolt/utils/` if needed
- **Types** → Create `src/types/` for shared types

## Testing Changes

1. Make code changes
2. Verify with `pnpm lint`
3. Test in Slack workspace
4. Check Nitro console for errors
5. Use Slack API debugger for event troubleshooting

## Dependencies

Key dependencies:
- `@slack/bolt` - Slack Bolt framework
- `@vercel/slack-bolt` - Vercel integration for Bolt
- `nitropack` - Universal server framework
- `h3` - HTTP framework used by Nitro
- `@biomejs/biome` - Fast linter and formatter
