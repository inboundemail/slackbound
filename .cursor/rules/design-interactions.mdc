---
description: UI interactions, animations, accessibility, and user experience patterns
---

# UI Interactions and Animations

## Animation Patterns

### Motion Library (Framer Motion / Motion)
```tsx
import { animate, AnimatePresence } from "motion/react";

// Imperative animations
const handleClick = () => {
  animate(
    "#element-id",
    { rotate: [300, -300, 300, -300, 0] },
    { duration: 0.5, ease: "easeInOut" }
  );
};

// AnimatePresence for conditional rendering
<AnimatePresence>
  {isVisible && (
    <motion.div
      initial={{ opacity: 0, y: -10 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -10 }}
    >
      Content
    </motion.div>
  )}
</AnimatePresence>
```

### Shake Animation Pattern
```tsx
const shakeAnimation = [300, -300, 300, -300, 300, -300, 0];

useEffect(() => {
  if (hasErrors) {
    // Initial shake
    animate(
      "#error-btn",
      { rotate: shakeAnimation },
      { duration: 0.5, ease: "easeInOut" }
    );

    // Repeat every 10 seconds
    const interval = setInterval(() => {
      animate(
        "#error-btn",
        { rotate: shakeAnimation },
        { duration: 0.5, ease: "easeInOut" }
      );
    }, 10000);

    return () => clearInterval(interval);
  }
}, [hasErrors]);

<Button id="error-btn">Errors</Button>
```

### CSS Transitions
```tsx
// Defined in globals.css
body {
  transition: background-color var(--transition-duration) ease;
}

// Component with transition
<div className="transition-all duration-300 hover:scale-105">
  Content
</div>
```

### Tailwind Animation Classes
```tsx
// Spin animation
<div className="animate-spin">
  <LoadingIcon />
</div>

// Pulse animation
<div className="animate-pulse">
  Loading...
</div>

// Bounce animation
<div className="animate-bounce">
  New notification
</div>
```

## User Interaction Patterns

### Click Handlers
```tsx
// Standard click
<Button onClick={handleClick}>
  Click Me
</Button>

// Click with data
<Button onClick={() => handleClick(item.id)}>
  Delete {item.name}
</Button>

// Prevent default
<a href="#" onClick={(e) => {
  e.preventDefault();
  handleClick();
}}>
  Link
</a>
```

### Row Click Pattern
```tsx
// DataTable with row clicks
<DataTable
  data={data}
  columns={columns}
  onRowClick={(row) => {
    // Handle row click
    handleRowSelection(row);
    setOpen(false);
  }}
/>

// Custom row click
<div
  className="cursor-pointer hover:bg-muted/50 transition-colors"
  onClick={() => handleRowClick(item)}
>
  {/* Row content */}
</div>
```

### Hover Effects
```tsx
// Background change
<div className="hover:bg-muted/50 transition-colors">

// Scale effect
<div className="hover:scale-105 transition-transform">

// Text color change
<span className="text-muted-foreground hover:text-foreground transition-colors">

// Button hover states (built into Button component)
<Button variant="ghost" className="hover:!bg-red-500 hover:!text-white">
```

## Selection States

### Active/Selected State
```tsx
// Conditional styling for active item
<div className={cn(
  "p-2 rounded cursor-pointer transition-colors",
  isActive && "bg-primary text-primary-foreground",
  !isActive && "hover:bg-muted"
)}>
  Item
</div>
```

### Multi-select Pattern
```tsx
const [selectedItems, setSelectedItems] = useState<string[]>([]);

const toggleSelection = (id: string) => {
  setSelectedItems(prev =>
    prev.includes(id)
      ? prev.filter(item => item !== id)
      : [...prev, id]
  );
};

<div
  className={cn(
    "p-2 cursor-pointer",
    selectedItems.includes(item.id) && "bg-primary/10 border-primary"
  )}
  onClick={() => toggleSelection(item.id)}
>
  {/* Item content */}
</div>
```

## Focus Management

### Auto-focus on Mount
```tsx
import { useEffect, useRef } from "react";

const inputRef = useRef<HTMLInputElement>(null);

useEffect(() => {
  inputRef.current?.focus();
}, []);

<input ref={inputRef} />
```

### Focus Trap in Modal
```tsx
// Dialog/Modal components handle this automatically
// But for custom modals:
import { useFocusTrap } from "@mantine/hooks";

const Component = () => {
  const focusTrapRef = useFocusTrap();

  return (
    <div ref={focusTrapRef}>
      {/* Modal content */}
    </div>
  );
};
```

### Tab Index Management
```tsx
// Allow keyboard navigation
<div tabIndex={0} onKeyDown={handleKeyDown}>
  Focusable div
</div>

// Skip in tab order
<div tabIndex={-1}>
  Not focusable via tab
</div>
```

## Keyboard Interactions

### Keyboard Shortcuts
```tsx
useEffect(() => {
  const handleKeyDown = (e: KeyboardEvent) => {
    // Save: Cmd/Ctrl + S
    if ((e.metaKey || e.ctrlKey) && e.key === "s") {
      e.preventDefault();
      handleSave();
    }

    // Close: Escape
    if (e.key === "Escape") {
      handleClose();
    }

    // Submit: Enter (in forms)
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSubmit();
    }
  };

  window.addEventListener("keydown", handleKeyDown);
  return () => window.removeEventListener("keydown", handleKeyDown);
}, []);
```

### Arrow Key Navigation
```tsx
const handleKeyDown = (e: React.KeyboardEvent) => {
  switch (e.key) {
    case "ArrowUp":
      e.preventDefault();
      selectPrevious();
      break;
    case "ArrowDown":
      e.preventDefault();
      selectNext();
      break;
    case "Enter":
      e.preventDefault();
      confirmSelection();
      break;
  }
};

<div onKeyDown={handleKeyDown} tabIndex={0}>
  {/* Navigable content */}
</div>
```

## Accessibility Patterns

### Semantic HTML
```tsx
// Use proper HTML elements
<nav>
  <ul>
    <li><a href="/page">Link</a></li>
  </ul>
</nav>

<main>
  <article>
    <h1>Title</h1>
    <p>Content</p>
  </article>
</main>

<button type="button">Action</button>
<button type="submit">Submit Form</button>
```

### ARIA Labels
```tsx
// Label for icons
<Button aria-label="Delete item">
  <TrashIcon />
</Button>

// Describe complex interactions
<div
  role="button"
  aria-label="Toggle menu"
  onClick={toggleMenu}
>
  <MenuIcon />
</div>

// Hidden content for screen readers
<span className="sr-only">Loading...</span>
<LoadingSpinner aria-hidden="true" />
```

### ARIA States
```tsx
// Expanded/collapsed
<button
  aria-expanded={isOpen}
  onClick={() => setIsOpen(!isOpen)}
>
  Toggle
</button>

// Selected state
<div
  role="option"
  aria-selected={isSelected}
  onClick={() => handleSelect()}
>
  Option
</div>

// Disabled state
<button disabled aria-disabled="true">
  Disabled Action
</button>
```

### Form Accessibility
```tsx
// Proper label association
<label htmlFor="email">Email</label>
<input id="email" type="email" name="email" />

// Required fields
<input
  required
  aria-required="true"
  aria-invalid={!!errors.email}
/>

// Error messages
{errors.email && (
  <span
    id="email-error"
    role="alert"
    className="text-destructive text-xs"
  >
    {errors.email.message}
  </span>
)}
<input
  id="email"
  aria-describedby={errors.email ? "email-error" : undefined}
/>
```

## Loading and Disabled States

### Button States
```tsx
<Button
  disabled={isLoading || isDisabled}
  onClick={handleClick}
>
  {isLoading ? (
    <>
      <LoadingSpinner className="mr-2" />
      Loading...
    </>
  ) : (
    "Click Me"
  )}
</Button>
```

### Disabled Section
```tsx
<div className={cn(
  isLoading && "opacity-50 pointer-events-none"
)}>
  {/* Content becomes non-interactive while loading */}
</div>
```

### Skeleton Loaders
```tsx
import { Skeleton } from "@/components/ui/skeleton";

{isLoading ? (
  <div className="space-y-2">
    <Skeleton className="h-4 w-full" />
    <Skeleton className="h-4 w-3/4" />
    <Skeleton className="h-4 w-1/2" />
  </div>
) : (
  <Content />
)}
```

## Drag and Drop

### Drag Handle
```tsx
<div
  draggable
  onDragStart={(e) => {
    e.dataTransfer.setData("text/plain", item.id);
  }}
  className="cursor-move"
>
  <GripIcon />
  Draggable Item
</div>
```

### Drop Zone
```tsx
const [isDragging, setIsDragging] = useState(false);

<div
  onDragOver={(e) => {
    e.preventDefault();
    setIsDragging(true);
  }}
  onDragLeave={() => setIsDragging(false)}
  onDrop={(e) => {
    e.preventDefault();
    setIsDragging(false);
    const data = e.dataTransfer.getData("text/plain");
    handleDrop(data);
  }}
  className={cn(
    "border-2 border-dashed rounded p-4",
    isDragging ? "border-primary bg-primary/10" : "border-border"
  )}
>
  Drop here
</div>
```

## Touch Interactions

### Mobile Touch Optimization
```tsx
// Larger touch targets on mobile
<button className="p-4 min-h-[44px] min-w-[44px]">
  Touch Me
</button>

// Prevent text selection during drag
<div className="select-none">
  Draggable content
</div>

// Disable image dragging
<img draggable={false} />

// No user select on buttons/images
img, button {
  user-select: none;
}
```

### Swipe Gestures
```tsx
import { useSwipeable } from "react-swipeable";

const handlers = useSwipeable({
  onSwipedLeft: () => handleNext(),
  onSwipedRight: () => handlePrevious(),
  preventDefaultTouchmoveEvent: true,
  trackMouse: true,
});

<div {...handlers}>
  Swipeable content
</div>
```

## Context Menus

### Right-Click Menu
```tsx
const [contextMenu, setContextMenu] = useState<{
  x: number;
  y: number;
} | null>(null);

const handleContextMenu = (e: React.MouseEvent) => {
  e.preventDefault();
  setContextMenu({ x: e.clientX, y: e.clientY });
};

<div onContextMenu={handleContextMenu}>
  Right-click me
</div>

{contextMenu && (
  <div
    className="fixed bg-popover border rounded shadow-lg p-2"
    style={{
      left: contextMenu.x,
      top: contextMenu.y,
    }}
  >
    {/* Context menu items */}
  </div>
)}
```

## Tooltips and Popovers

### Tooltip Pattern
```tsx
import { Tooltip, TooltipContent, TooltipTrigger } from "@/components/ui/tooltip";

<Tooltip>
  <TooltipTrigger asChild>
    <Button variant="ghost" size="icon">
      <InfoIcon />
    </Button>
  </TooltipTrigger>
  <TooltipContent>
    <p>Helpful information</p>
  </TooltipContent>
</Tooltip>
```

### Hover Card Pattern
```tsx
import { HoverCard, HoverCardContent, HoverCardTrigger } from "@/components/ui/hover-card";

<HoverCard>
  <HoverCardTrigger asChild>
    <span className="underline cursor-help">
      Hover me
    </span>
  </HoverCardTrigger>
  <HoverCardContent>
    Detailed information shown on hover
  </HoverCardContent>
</HoverCard>
```

## Confirmation Patterns

### Confirmation Dialog
```tsx
const [confirmOpen, setConfirmOpen] = useState(false);

<AlertDialog open={confirmOpen} onOpenChange={setConfirmOpen}>
  <AlertDialogTrigger asChild>
    <Button variant="destructive">Delete</Button>
  </AlertDialogTrigger>
  <AlertDialogContent>
    <AlertDialogHeader>
      <AlertDialogTitle>Are you sure?</AlertDialogTitle>
      <AlertDialogDescription>
        This action cannot be undone.
      </AlertDialogDescription>
    </AlertDialogHeader>
    <AlertDialogFooter>
      <AlertDialogCancel>Cancel</AlertDialogCancel>
      <AlertDialogAction onClick={handleDelete}>
        Delete
      </AlertDialogAction>
    </AlertDialogFooter>
  </AlertDialogContent>
</AlertDialog>
```

### Inline Confirmation
```tsx
const [confirmDelete, setConfirmDelete] = useState(false);

{!confirmDelete ? (
  <Button
    variant="destructive"
    onClick={() => setConfirmDelete(true)}
  >
    Delete
  </Button>
) : (
  <div className="flex gap-2">
    <Button
      variant="destructive"
      onClick={handleDelete}
    >
      Confirm Delete
    </Button>
    <Button
      variant="outline"
      onClick={() => setConfirmDelete(false)}
    >
      Cancel
    </Button>
  </div>
)}
```

## Scroll Behavior

### Smooth Scrolling
```tsx
// Scroll to element
const scrollToElement = (id: string) => {
  document.getElementById(id)?.scrollIntoView({
    behavior: "smooth",
    block: "start",
  });
};

// Scroll to top
const scrollToTop = () => {
  window.scrollTo({
    top: 0,
    behavior: "smooth",
  });
};
```

### Scroll Position Restoration
```tsx
useEffect(() => {
  const scrollPosition = sessionStorage.getItem("scrollPosition");
  if (scrollPosition) {
    window.scrollTo(0, parseInt(scrollPosition));
  }

  const handleScroll = () => {
    sessionStorage.setItem("scrollPosition", window.scrollY.toString());
  };

  window.addEventListener("scroll", handleScroll);
  return () => window.removeEventListener("scroll", handleScroll);
}, []);
```

## Copy to Clipboard

### Copy Pattern
```tsx
const copyToClipboard = async (text: string) => {
  try {
    await navigator.clipboard.writeText(text);
    toast.success("Copied to clipboard");
  } catch (err) {
    toast.error("Failed to copy");
  }
};

<Button onClick={() => copyToClipboard(text)}>
  <CopyIcon />
  Copy
</Button>
```

## File Upload

### File Upload Pattern
```tsx
const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
  const file = e.target.files?.[0];
  if (!file) return;

  // Validate file
  if (file.size > 5 * 1024 * 1024) {
    toast.error("File too large (max 5MB)");
    return;
  }

  // Process file
  const reader = new FileReader();
  reader.onload = (e) => {
    const base64 = e.target?.result as string;
    handleBase64(base64);
  };
  reader.readAsDataURL(file);
};

<input
  type="file"
  accept="image/*"
  onChange={handleFileUpload}
  className="hidden"
  id="file-upload"
/>
<label htmlFor="file-upload">
  <Button asChild>
    <span>Upload File</span>
  </Button>
</label>
```

## Best Practices

1. **Use semantic HTML** for better accessibility
2. **Provide ARIA labels** for icon-only buttons
3. **Support keyboard navigation** for all interactive elements
4. **Maintain minimum touch target size** (44x44px on mobile)
5. **Show loading states** during async operations
6. **Disable interactions** during loading
7. **Provide visual feedback** for all user actions
8. **Use proper focus management** in modals
9. **Handle errors gracefully** with user-friendly messages
10. **Support both mouse and keyboard** interactions
11. **Test with screen readers** regularly
12. **Avoid relying solely on color** for information
13. **Provide text alternatives** for icons and images
14. **Use consistent interaction patterns** throughout the app
15. **Animate thoughtfully** - don't overdo it
